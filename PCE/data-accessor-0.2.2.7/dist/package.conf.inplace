[InstalledPackageInfo {installedPackageId = InstalledPackageId "data-accessor-0.2.2.7-inplace", sourcePackageId = PackageIdentifier {pkgName = PackageName "data-accessor", pkgVersion = Version {versionBranch = [0,2,2,7], versionTags = []}}, license = BSD3, copyright = "", maintainer = "Henning Thielemann <haskell@henning-thielemann.de>", author = "Henning Thielemann <haskell@henning-thielemann.de>, Luke Palmer <lrpalmer@gmail.com>", stability = "", homepage = "http://www.haskell.org/haskellwiki/Record_access", pkgUrl = "", synopsis = "Utilities for accessing and manipulating fields of records", description = "In Haskell 98 the name of a record field\nis automatically also the name of a function which gets the value\nof the according field.\nE.g. if we have\n\ndata Pair a b = Pair\nfirst :: a, second :: b\n\nthen\n\n> first  :: Pair a b -> a\n> second :: Pair a b -> b\n\nHowever for setting or modifying a field value\nwe need to use some syntactic sugar, which is often clumsy.\n\nmodifyFirst :: (a -> a) -> (Pair a b -> Pair a b)\nmodifyFirst f r\\@(Pair\nfirst=a\n) = r\nfirst = f a\n\nWith this package you can define record field accessors\nwhich allow setting, getting and modifying values easily.\nThe package clearly demonstrates the power of the functional approach:\nYou can combine accessors of a record and sub-records,\nto make the access look like the fields of the sub-record belong to the main record.\n\nExample:\n\n> *Data.Accessor.Example> (first^:second^=10) (('b',7),\"hallo\")\n> (('b',10),\"hallo\")\n\nYou can easily manipulate record fields in a 'Control.Monad.State.State' monad,\nyou can easily code 'Show' instances that use the Accessor syntax\nand you can parse binary streams into records.\nSee @Data.Accessor.Example@ for demonstration of all features.\n\nIt would be great if in revised Haskell versions the names of record fields\nare automatically 'Data.Accessor.Accessor's\nrather than plain @get@ functions.\nFor now, the package @data-accessor-template@ provides Template Haskell functions\nfor automated generation of 'Data.Acesssor.Accessor's.\nSee also the other @data-accessor@ packages\nthat provide an Accessor interface to other data types.\nThe package @enumset@ provides accessors to bit-packed records.\n\nFor similar packages see @lenses@ and @fclabel@.\nA related concept are editors\n<http://conal.net/blog/posts/semantic-editor-combinators/>.\nEditors only consist of a modify method\n(and @modify@ applied to a 'const' function is a @set@ function).\nThis way, they can modify all function values of a function at once,\nwhereas an accessor can only change a single function value,\nsay, it can change @f 0 = 1@ to @f 0 = 2@.\nThis way, editors can even change the type of a record or a function.\nAn Arrow instance can be defined for editors,\nbut for accessors only a Category instance is possible ('(.)' method).\nThe reason is the @arr@ method of the @Arrow@ class,\nthat conflicts with the two-way nature (set and get) of accessors.", category = "Data", exposed = True, exposedModules = ["Data.Accessor","Data.Accessor.Basic","Data.Accessor.Container","Data.Accessor.Show","Data.Accessor.Tuple","Data.Accessor.BinaryRead","Data.Accessor.MonadState"], hiddenModules = ["Data.Accessor.Example","Data.Accessor.Private","Data.Accessor.MonadStatePrivate"], trusted = False, importDirs = ["/home/arunothia/Documents/University Of Melbourne/codingground/PCE/data-accessor-0.2.2.7/dist/build"], libraryDirs = ["/home/arunothia/Documents/University Of Melbourne/codingground/PCE/data-accessor-0.2.2.7/dist/build"], hsLibraries = ["HSdata-accessor-0.2.2.7"], extraLibraries = [], extraGHCiLibraries = [], includeDirs = [], includes = [], depends = [InstalledPackageId "array-0.4.0.1-3b78425c10ff2dad7acf7e8c8ae014c3",InstalledPackageId "base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57",InstalledPackageId "containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2",InstalledPackageId "transformers-0.3.0.0-ff2bb6ac67241ebb987351a3db564af0"], hugsOptions = [], ccOptions = [], ldOptions = [], frameworkDirs = [], frameworks = [], haddockInterfaces = ["/home/arunothia/Documents/University Of Melbourne/codingground/PCE/data-accessor-0.2.2.7/dist/doc/html/data-accessor/data-accessor.haddock"], haddockHTMLs = ["/home/arunothia/Documents/University Of Melbourne/codingground/PCE/data-accessor-0.2.2.7/dist/doc/html/data-accessor"]}
]